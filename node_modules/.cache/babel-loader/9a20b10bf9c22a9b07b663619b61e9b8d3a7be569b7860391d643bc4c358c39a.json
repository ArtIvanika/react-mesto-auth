{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _checkStatusRequest(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // //попробовать как работает\n  // _request(url, options) {\n  //   return fetch(url, options).then(this._checkStatusRequest)\n  // }\n\n  // getUserInfo() {\n  //   return  this._request(`${this._url}/users/me`, {\n  //     method: \"GET\",\n  //     headers: this._headers,\n  //   })\n  // }\n\n  editUserInfo(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => this._checkStatusRequest(res));\n  }\n  editUserAvatar(_ref2) {\n    let {\n      avatar\n    } = _ref2;\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => this._checkStatusRequest(res));\n  }\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => this._checkStatusRequest(res));\n  }\n  addNewCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._checkStatusRequest(res));\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkStatusRequest(res));\n  }\n  putLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => this._checkStatusRequest(res));\n  }\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkStatusRequest(res));\n  }\n}\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-63\",\n  headers: {\n    authorization: \"22a3f4d4-5ffd-4789-9813-a7106adf4dad\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_checkStatusRequest","res","ok","json","Promise","reject","status","editUserInfo","_ref","name","about","fetch","method","body","JSON","stringify","then","editUserAvatar","_ref2","avatar","getInitialCards","addNewCard","data","link","deleteCard","cardId","putLike","deleteLike","api","authorization"],"sources":["/Users/ivanova.veronika/dev/mesto-react/src/utils/Api.js"],"sourcesContent":[" class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _checkStatusRequest(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // //попробовать как работает\n  // _request(url, options) {\n  //   return fetch(url, options).then(this._checkStatusRequest)\n  // }\n\n  // getUserInfo() {\n  //   return  this._request(`${this._url}/users/me`, {\n  //     method: \"GET\",\n  //     headers: this._headers,\n  //   })\n  // }\n\n\n\n  editUserInfo({ name, about }) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    }).then((res) => this._checkStatusRequest(res));\n  }\n\n  editUserAvatar({ avatar }) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar,\n      }),\n    }).then((res) => this._checkStatusRequest(res));\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: this._headers,\n    }).then((res) => this._checkStatusRequest(res));\n  }\n\n  addNewCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => this._checkStatusRequest(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then((res) => this._checkStatusRequest(res));\n  }\n\n  putLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers,\n    }).then((res) => this._checkStatusRequest(res));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then((res) => this._checkStatusRequest(res));\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-63\",\n  headers: {\n    authorization: \"22a3f4d4-5ffd-4789-9813-a7106adf4dad\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}