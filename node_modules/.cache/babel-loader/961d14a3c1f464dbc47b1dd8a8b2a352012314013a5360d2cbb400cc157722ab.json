{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nconst getRes = res => {\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n};\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(getRes);\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(getRes);\n};\n//       .then((response => response.json()))\n//   .then((data) => {\n//     if (data.user){\n//       localStorage.setItem('jwt', data.jwt);\n//       return data;\n//     }\n//   })\n//   .catch(err => console.log(err))\n// }; \n\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(getRes);\n};","map":{"version":3,"names":["BASE_URL","getRes","res","ok","json","Promise","reject","status","register","password","email","fetch","method","headers","body","JSON","stringify","then","authorize","checkToken","token"],"sources":["/Users/ivanova.veronika/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst getRes = (res) => {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n}\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({password, email})\n  })\n  .then(getRes);\n}\n\nexport const authorize = (password, email) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({password, email})\n      }).then(getRes);\n    }\n//       .then((response => response.json()))\n//   .then((data) => {\n//     if (data.user){\n//       localStorage.setItem('jwt', data.jwt);\n//       return data;\n//     }\n//   })\n//   .catch(err => console.log(err))\n// }; \n\n\nexport const checkToken = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      }\n    }).then(getRes)\n  }"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAEvD,MAAMC,MAAM,GAAIC,GAAG,IAAK;EACpB,OAAOA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,EAAE,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;AACxE,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACP,QAAQ;MAAEC;IAAK,CAAC;EACxC,CAAC,CAAC,CACDO,IAAI,CAAChB,MAAM,CAAC;AACf,CAAC;AAED,OAAO,MAAMiB,SAAS,GAAGA,CAACT,QAAQ,EAAEC,KAAK,KAAK;EAC1C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IAC/BY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACP,QAAQ;MAAEC;IAAK,CAAC;EACxC,CAAC,CAAC,CAACO,IAAI,CAAChB,MAAM,CAAC;AACjB,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMkB,UAAU,GAAIC,KAAK,IAAK;EACjC,OAAOT,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASO,KAAM;IACnC;EACF,CAAC,CAAC,CAACH,IAAI,CAAChB,MAAM,CAAC;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}